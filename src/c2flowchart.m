% c2flowchart
%
% 	Create a Stateflow Chart for a C function.
% 	Takes in a C function and builds a flow chart functions based on the AST
% 	of the parsed C code
%
% 	Inputs:
%
%  			c_file:				The path to the C file containing the functions that
%								are to be translated.
%
%								Example: "example/test.c"
%
%			export_c_types:		Boolean variable. When set to true, the function
% 								import any custom C structs and enums to base
% 								workspace. Default value is '0'.
%
% 	Outputs:
%
%	  		None
%
%   Example:
%
%           c2flowchart("example/test1.c", 1);
%
function c2flowchart(c_file, export_c_types)

	if (nargin == 2 && export_c_types == 1)
		Simulink.importExternalCTypes(c_file);
	end

	if ~exist('tmp','dir')
		mkdir tmp;
	end

	if exist('tmp/json.txt')
		delete tmp/json.txt;
	end

	objAST = getAST(c_file);

	[~,name,~] = fileparts(c_file);

	buildFlowChart(name, objAST);

end



% buildFlowChart
%
% 	Generates the flowchart and files it with the contents of the given AST
% 	object.
%
% 	Inputs:
%
%		chart_name:		The name of the model generated by the tool
%
%		objAST:			The AST object generated by the pycparser library.
%
%
% 	Outputs:
%
%	  	None
%
function buildFlowChart(chart_name, objAST)
	bdhandle = sfnew(chart_name);
	rt = sfroot;
	bdmodel = rt.find('handle', bdhandle);
	ch = bdmodel.find('-isa','Stateflow.Chart');
	if (length(ch)> 1)
		ch = ch(1);
	end
	ch.view;


	% Create the flow chart functions
	if length(objAST.ext) == 1
		%for a single function definition
		createFunctionFlowChart(ch, objAST.ext, 0);
	else
		%for multiple function definitions
		x_pos = 0;
		for i = 1:1:length(objAST.ext)

			if iscell(objAST.ext)
				func = objAST.ext{i};
			else
				func = objAST.ext(i);
			end

			if strcmp(func.x_nodetype,'FuncDef')
				x_pos = createFunctionFlowChart(ch, func, x_pos);
			end

		end
	end
end

% getAST
%
%	Wrapper function which runs the python script that is used the generate
% 	the AST object. The Python script writes the AST object to the JSON file
%	'tmp/json.txt' and this function then reads this file and returns the
% 	contents.
%
% 	Inputs:
%
%  		 	c_file:		The path to the C file containing the functions that
%						are to be translated.
%
%						Example: "example/test.c"
%
% 	Outputs:
%
%	  		objAST: 	The AST object generated from the given c_file.
%
function objAST = getAST(c_file)

	commandStr = char(strcat('python c_json.py',{' '}, c_file));
	[status, commandOut] = system(commandStr);



	data = fileread('tmp/json.txt');
	objAST = jsondecode(data);

	clc;
end